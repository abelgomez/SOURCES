import os

Import("cflags")
Import("boostpath")
Import("basepath")
Import("colorgcc")
Import("lemonpath")
Import("lemon")

dspn_flags = cflags

cwd = os.getcwd()
objdir = basepath + "/objects/DSPN-Tool/NSRC/DSPN-Tool/"

if not os.path.exists(objdir):
	print("[DSPN] creating directory " + objdir)
	os.makedirs(objdir)
else:
	print("[DSPN] using directory " + objdir)

# TODO check with lpsolve library & extend flags if present
dspn_flags.extend([ "-Wall",
					"-std=c++17",
					"-I/usr/include",
					"-I"+objdir,
					"-I"+cwd,
					"-Wno-unused-function",
					"-MMD",
					"-MF",
					objdir+"newparser.lyy.d",
					"-DNDEBUG=1"])
paths = [boostpath, objdir, cwd, "/usr/lib/", "/usr/local/lib"]

### initialize the environment
dspn_env = Environment(ENV=os.environ, CC=colorgcc, CCFLAGS=dspn_flags, LIBPATH=paths,
        LINKFLAGS="--static -static-libgcc -static-libstdc++")

### build the parser
#
# add the `lemon` builder
lemon_act = lemonpath + " $SOURCE"
lemon_builder = Builder(action=lemon_act)
dspn_env['BUILDERS']['Lemon'] = lemon_builder

# construct parser derived files (newparser.c, newparser.h, newparser.out)
derived = dspn_env.Lemon(target="newparser.h", source="newparser.lyy")
Requires(derived, lemon)

mv = dspn_env.Command(target="newparser.lyy.h", source="newparser.h", action="mv $SOURCE $TARGET")

# move derived files to `objdir`
m1 = dspn_env.InstallAs(target=objdir + "newparser.lyy.h", source="newparser.lyy.h")
m2 = dspn_env.InstallAs(target=objdir + "newparser.lyy.out", source="newparser.out")
sed_act = 'cat $SOURCE | sed "s/NSRC\/DSPN-Tool\/newparser.c/objects\/DSPN-Tool\/NSRC\/DSPN-Tool\/newparser.lyy.cpp/g" > $TARGET'
final = dspn_env.Command(objdir + "newparser.lyy.cpp", "newparser.c", action=sed_act)

# construct parser object
parse_obj = dspn_env.Object(objdir+"newparser.lyy.o", final)
dspn_env.Append(LIBS=parse_obj)

# build DSPN-Tool
Export('dspn_env')
SConscript("./sconsbuild/SConstruct")
